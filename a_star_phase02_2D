#!/usr/bin/python3

# Import the necessary libraries

import numpy as np
import math
import heapq
import cv2

# import rospy
# from geometry_msgs.msg import Twist
# from std_msgs.msg import String
# import time


def make_canvas_2():
    """This function creates the map with the obstacles

    Returns:
        tuple: (obstacle, canvas)
    """    
    canvas = np.zeros((200, 600, 3), dtype="uint8")
    blue = (255,0,0)
    red = (0,0,255)

    clearance = int(input("Enter the clearance (in cm): "))
    robot_radius = 10.5
    c = int(clearance + robot_radius)

    # Obstacle rectangles

    cv2.rectangle(canvas, (150-c, 200), (165+c,75-c), blue, thickness=-1)
    cv2.rectangle(canvas, (250-c,0), (265+c,125+c), blue, thickness=-1)
    cv2.rectangle(canvas, (150,200), (165,75), red, thickness=-1)
    cv2.rectangle(canvas, (250,0), (265,125), red, thickness=-1)

    cv2.circle(canvas, (400,90), 50+c, blue, thickness=-1)
    cv2.circle(canvas, (400,90), 50, red, thickness=-1)

    # Finding all the nonzero pixels from the canvas and appending them to the list of obstacle points

    obstacle = []
    for y in range(canvas.shape[0]):
        for x in range(canvas.shape[1]):
            if canvas[y,x].any():
                obstacle.append((x,y))

    # Returning the obstacle space and the canvas image

    return obstacle, canvas

obstacle, canvas = make_canvas_2()

# Function to get the user input

def user_input():
    """Takes start and goal coordinates as user input. Also gets the step size of the robot

    Returns:
        tuple: (start_node, goal_node, radius)
    """    
    valid_input = False
    while valid_input == False:
        global start_x, start_y, clearance
        start_x = int(input("Enter X coordinate of start node (in cm) between 0 and 600: "))  # X coordinate of start node
        start_y = int(input("Enter Y coordinate of start node (in cm) between 0 and 200: "))  # Y coordinate of start node
        start_theta = int(input("Enter the theta at the start node from 0 to 360: "))    # Angle at the start node
        goal_x = int(input("Enter X coordinate of goal node (in cm) between 0 and 600: "))    # X coordinate of goal node
        goal_y = int(input("Enter Y coordinate of goal node (in cm) between 0 and 200: "))    # Y coordinate of goal node           
        rpm1 = int(input("Rpm value 1: "))
        rpm2 = int(input("Rpm value 2: "))     

        start_node = (int(start_x),int(start_y),start_theta)
        goal_node = (int(goal_x),int(goal_y))
        rpm_choices = (rpm1, rpm2)
        
        if (start_node[0], start_node[1]) in obstacle:
            print(f"Start node {start_node} is in obstacle space. Enter another node.") # Error message if start node is in obstacle space
            valid_input = False
        elif goal_node in obstacle:
            print(f"Goal node {goal_node} is in obstacle space. Enter another node") # Error message if goal node is in obstacle space
            valid_input = False
        elif start_x<0 or start_x>600 or goal_x<0 or goal_x>600 or start_y<0 or start_y>200 or goal_y<0 or goal_y>200 or start_theta<0 or start_theta>360:
            print("The coordinates you entered are beyond the scope of the map. Enter valid start and goal coordinates.") # Error message if start or goal node is beyond the scope of the map
            valid_input = False
        elif (start_node[0], start_node[1]) not in obstacle and goal_node not in obstacle:
            valid_input = True
            break
        
    return start_node, goal_node, rpm_choices

start_node, goal_node, rpm_choices = user_input()
rpm1 = rpm_choices[0]
rpm2 = rpm_choices[1]

closed_dict = {}
open_list = []


def calculate_cost(current_node, ul, ur):  
    """Function to move the robot with a step size equal to the radius and orientation same as the start theta.

    Args:
        current_node (tuple): The node that is currently being explored
        cost (int): The cost to move the robot with step size equal to radius. Defaults to 1.

    Returns:
        tuple: (child node, cost)
    """    
    x, y, theta = current_node[0], current_node[1], current_node[2]
    t = 0
    # r = 0.038
    # L = 0.354
    r = 0.033
    L = 0.16
    # r = 3.3
    # L = 0.16
    dt = 0.1
    xn = x
    yn = y
    thetan = 3.14 * theta / 180
    # Xi, Yi,Thetai: Input point's coordinates
    # Xs, Ys: Start point coordinates for plot function
    # Xn, Yn, Thetan: End point coordintes
    D = 0

    while t<1:
        t = t + dt
        xs = x
        ys = y
        a = 0.5 * r * (ul + ur) * math.cos(thetan) * dt
        b = 0.5 * r * (ul + ur) * math.sin(thetan) * dt
        xn += a
        yn += b
        thetan += (r / L) * (ur - ul) * dt
        D = math.sqrt((xn-xs)**2 + (yn-ys)**2)
    thetan = 180 * (thetan) / 3.14

    while thetan < 0:
        thetan += 360
    while thetan > 360:
        thetan -= 360
    if -1<int(xn)<601 and -1<int(yn)<201 and -1<int(thetan)<361:
        child_node = (int(xn), int(yn), int(thetan))
        return child_node, int(D)
    else:
        return None, None
    
current_node = start_node

# Action set to move the robot 

action_set = [[0,rpm1], [rpm1,0], [rpm1,rpm1], [0,rpm2], [rpm2,0], [rpm2,rpm2], [rpm1,rpm2], [rpm2,rpm1]]

V = np.empty((1201,401,12), dtype=object)
for x in range(0,1201):
    for y in range(0,401):
        for theta in range(0,12):
            V[x][y][theta] = 0

xg = goal_node[0]
yg = goal_node[1]

# Setting the distance and angle threshold

threshold_dist = 0.5
threshold_angle = 30
xc = current_node[0]
yc = current_node[1]
cost_to_go = int(math.sqrt((xg - current_node[0])**2 + (yg - current_node[1])**2))
heapq.heappush(open_list, (cost_to_go, 0, start_node))
heap = [(t[0] + t[1], t) for t in open_list]
heapq.heapify(heap)
closed_dict[start_node] = (start_node, None, 0 + cost_to_go)
V[int(start_node[0]/threshold_dist)][int(start_node[1]/threshold_dist)][int(start_node[2]/threshold_angle)] = 1

backtrack_dict = {}

def generate_path(start_node, goal_node):
    """Generates path from the start node to the goal node

    Args:
        start_node (tuple): (start_x,start_y,start_theta)
        goal_node (_type_): (goal_x,goal_y,goal_theta)

    Returns:
        list: backtrack_path
    """    
    backtrack_path = []
    current_node = goal_node_path
    while closed_dict[current_node][0] != closed_dict[start_node][0]:
        backtrack_path.append((closed_dict[current_node][0], (closed_dict[current_node][2])))
        current_node = closed_dict[current_node][1]
    backtrack_path.append((closed_dict[start_node][0], (closed_dict[start_node][2])))
    backtrack_path.reverse()
    for index, node in enumerate(backtrack_path):
        backtrack_dict[index] = (node)
    
    return backtrack_path

def a_star(start_node, goal_node):
    global goal_node_path
    """A-Star Algorithm to find out the optimal path between start node and goal node.

    Args:
        start_node (tuple): (start_x,start_y,start_theta)
        goal_node (tuple): (goal_x,goal_y,goal_theta)
    """
    while open_list:
        heap = [(t[0] + t[1], t) for t in open_list]
        heapq.heapify(heap)
        cost_to_go, cost_to_come, current_node = heapq.heappop(open_list)
        if int(current_node[0]) == xg and int(current_node[1]) == yg:
            print("Goal node reached.")
            for key, value in closed_dict.items():
                if key[0] == xg and key[1] == yg:
                    goal_node_path = (xg,yg,key[2])
            path = generate_path(start_node, goal_node)
            print(path) # Printing the backtrack path along with the cost
            print()
            print('-'*100)
            print(f"Total cost required to reach goal node : {closed_dict[goal_node_path][2]}")  # Printing the total cost required to reach the goal node
            print('-'*100)
            break
        elif V[int(current_node[0]/threshold_dist)][int(current_node[1]/threshold_dist)][int(current_node[2]/threshold_angle)] == 1 and closed_dict[current_node][2] < cost_to_come + cost_to_go:
            continue
        for move in action_set:
            try:
                ul = move[0]
                ur = move[1]
                k = calculate_cost(current_node,ul,ur)
                cost = k[1]
                child_node = k[0]
                if cost is not None:
                    cost_to_come += cost
                    # cost_to_come = cost
                if child_node is not None and V[int(child_node[0]/threshold_dist)][int(child_node[1]/threshold_dist)][int(child_node[2]/threshold_angle)] != 1 and (int(child_node[0]),int(child_node[1])) not in obstacle:
                    cost_to_go = int(math.sqrt((xg - int(child_node[0]))**2 + (yg - int(child_node[1]))**2))   # Calculating the cost to go the goal node from child node
                    heapq.heappush(open_list, (cost_to_go, cost_to_come, child_node))           # Appending the child node to the open list
                    heap = [(t[0] + t[1], t) for t in open_list]
                    heapq.heapify(heap)
                    closed_dict[child_node] = (child_node, current_node, cost_to_come + cost_to_go) # Updating the visited nodes in the dictionary
                    V[int(child_node[0]/threshold_dist)][int(child_node[1]/threshold_dist)][int(child_node[2]/threshold_angle)] = 1 # Storing information to avoid duplicate nodes
                    point1 = (closed_dict[child_node][1][0], closed_dict[child_node][1][1])
                    point2 = (closed_dict[child_node][0][0], closed_dict[child_node][0][1])
                    cv2.arrowedLine(canvas, point1, point2, (0,255,0), 1, tipLength=1)    # Plotting the arrowed line for visited nodes
                    canvas_flip = cv2.flip(canvas,0)    # Inverting the y axis since origin is at the bottom left
                    cv2.imshow("canvas", canvas_flip)
                    cv2.waitKey(1)
                elif child_node is not None and V[int(child_node[0]/threshold_dist)][int(child_node[1]/threshold_dist)][int(child_node[2]/threshold_angle)] == 1 and closed_dict[child_node][2] > cost_to_come + cost_to_go and (int(child_node[0]),int(child_node[1])) not in obstacle:
                    closed_dict[child_node] = (child_node, current_node, cost_to_come + cost_to_go) # Updating the total cost if the node has already been visited
            except:
                pass

    if not open_list:
        print("Goal node cannot be reached.")
